// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CrossRequest extends ethereum.Event {
  get params(): CrossRequest__Params {
    return new CrossRequest__Params(this);
  }
}

export class CrossRequest__Params {
  _event: CrossRequest;

  constructor(event: CrossRequest) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toAddress(): string {
    return this._event.parameters[2].value.toString();
  }

  get toBlockchain(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class FeePercentageBridgeChanged extends ethereum.Event {
  get params(): FeePercentageBridgeChanged__Params {
    return new FeePercentageBridgeChanged__Params(this);
  }
}

export class FeePercentageBridgeChanged__Params {
  _event: FeePercentageBridgeChanged;

  constructor(event: FeePercentageBridgeChanged) {
    this._event = event;
  }

  get oldFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinTokenAmountChanged extends ethereum.Event {
  get params(): MinTokenAmountChanged__Params {
    return new MinTokenAmountChanged__Params(this);
  }
}

export class MinTokenAmountChanged__Params {
  _event: MinTokenAmountChanged;

  constructor(event: MinTokenAmountChanged) {
    this._event = event;
  }

  get blockchainName(): string {
    return this._event.parameters[0].value.toString();
  }

  get oldAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TokenChanged extends ethereum.Event {
  get params(): TokenChanged__Params {
    return new TokenChanged__Params(this);
  }
}

export class TokenChanged__Params {
  _event: TokenChanged;

  constructor(event: TokenChanged) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Bridge extends ethereum.SmartContract {
  static bind(address: Address): Bridge {
    return new Bridge("Bridge", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FEE_NATIVE(): BigInt {
    let result = super.call("FEE_NATIVE", "FEE_NATIVE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FEE_NATIVE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FEE_NATIVE", "FEE_NATIVE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MONITOR_ROLE(): Bytes {
    let result = super.call("MONITOR_ROLE", "MONITOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MONITOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MONITOR_ROLE", "MONITOR_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OWNER_WALLET(): Address {
    let result = super.call("OWNER_WALLET", "OWNER_WALLET():(address)", []);

    return result[0].toAddress();
  }

  try_OWNER_WALLET(): ethereum.CallResult<Address> {
    let result = super.tryCall("OWNER_WALLET", "OWNER_WALLET():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PERCENTS_DIVIDER(): BigInt {
    let result = super.call(
      "PERCENTS_DIVIDER",
      "PERCENTS_DIVIDER():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENTS_DIVIDER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENTS_DIVIDER",
      "PERCENTS_DIVIDER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  acceptTransfer(
    receiver: Address,
    amount: BigInt,
    fromBlockchain: string,
    blockHash: Bytes,
    transactionHash: Bytes,
    logIndex: BigInt
  ): boolean {
    let result = super.call(
      "acceptTransfer",
      "acceptTransfer(address,uint256,string,bytes32,bytes32,uint32):(bool)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromString(fromBlockchain),
        ethereum.Value.fromFixedBytes(blockHash),
        ethereum.Value.fromFixedBytes(transactionHash),
        ethereum.Value.fromUnsignedBigInt(logIndex)
      ]
    );

    return result[0].toBoolean();
  }

  try_acceptTransfer(
    receiver: Address,
    amount: BigInt,
    fromBlockchain: string,
    blockHash: Bytes,
    transactionHash: Bytes,
    logIndex: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "acceptTransfer",
      "acceptTransfer(address,uint256,string,bytes32,bytes32,uint32):(bool)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromString(fromBlockchain),
        ethereum.Value.fromFixedBytes(blockHash),
        ethereum.Value.fromFixedBytes(transactionHash),
        ethereum.Value.fromUnsignedBigInt(logIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addBlockchain(name: string, minTokenAmount: BigInt): BigInt {
    let result = super.call(
      "addBlockchain",
      "addBlockchain(string,uint256):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromUnsignedBigInt(minTokenAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_addBlockchain(
    name: string,
    minTokenAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addBlockchain",
      "addBlockchain(string,uint256):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromUnsignedBigInt(minTokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addMonitor(account: Address): boolean {
    let result = super.call("addMonitor", "addMonitor(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_addMonitor(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("addMonitor", "addMonitor(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  blockchain(param0: BigInt): string {
    let result = super.call("blockchain", "blockchain(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_blockchain(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("blockchain", "blockchain(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  delBlockchain(name: string): boolean {
    let result = super.call("delBlockchain", "delBlockchain(string):(bool)", [
      ethereum.Value.fromString(name)
    ]);

    return result[0].toBoolean();
  }

  try_delBlockchain(name: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "delBlockchain",
      "delBlockchain(string):(bool)",
      [ethereum.Value.fromString(name)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delMonitor(account: Address): boolean {
    let result = super.call("delMonitor", "delMonitor(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_delMonitor(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("delMonitor", "delMonitor(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  existsBlockchain(name: string): boolean {
    let result = super.call(
      "existsBlockchain",
      "existsBlockchain(string):(bool)",
      [ethereum.Value.fromString(name)]
    );

    return result[0].toBoolean();
  }

  try_existsBlockchain(name: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "existsBlockchain",
      "existsBlockchain(string):(bool)",
      [ethereum.Value.fromString(name)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feePercentageBridge(): BigInt {
    let result = super.call(
      "feePercentageBridge",
      "feePercentageBridge():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_feePercentageBridge(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feePercentageBridge",
      "feePercentageBridge():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinTokenAmount(blockchainName: string): BigInt {
    let result = super.call(
      "getMinTokenAmount",
      "getMinTokenAmount(string):(uint256)",
      [ethereum.Value.fromString(blockchainName)]
    );

    return result[0].toBigInt();
  }

  try_getMinTokenAmount(blockchainName: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinTokenAmount",
      "getMinTokenAmount(string):(uint256)",
      [ethereum.Value.fromString(blockchainName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTokenBalance(): BigInt {
    let result = super.call(
      "getTokenBalance",
      "getTokenBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTokenBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenBalance",
      "getTokenBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransactionId(
    blockHash: Bytes,
    transactionHash: Bytes,
    receiver: Address,
    amount: BigInt,
    logIndex: BigInt
  ): Bytes {
    let result = super.call(
      "getTransactionId",
      "getTransactionId(bytes32,bytes32,address,uint256,uint32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(blockHash),
        ethereum.Value.fromFixedBytes(transactionHash),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(logIndex)
      ]
    );

    return result[0].toBytes();
  }

  try_getTransactionId(
    blockHash: Bytes,
    transactionHash: Bytes,
    receiver: Address,
    amount: BigInt,
    logIndex: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransactionId",
      "getTransactionId(bytes32,bytes32,address,uint256,uint32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(blockHash),
        ethereum.Value.fromFixedBytes(transactionHash),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(logIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  listBlockchain(): Array<string> {
    let result = super.call(
      "listBlockchain",
      "listBlockchain():(string[])",
      []
    );

    return result[0].toStringArray();
  }

  try_listBlockchain(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "listBlockchain",
      "listBlockchain():(string[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  processed(param0: Bytes): boolean {
    let result = super.call("processed", "processed(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_processed(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("processed", "processed(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setFeeNative(amount: BigInt): boolean {
    let result = super.call("setFeeNative", "setFeeNative(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_setFeeNative(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("setFeeNative", "setFeeNative(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setFeePercentageBridge(newFee: BigInt): boolean {
    let result = super.call(
      "setFeePercentageBridge",
      "setFeePercentageBridge(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(newFee)]
    );

    return result[0].toBoolean();
  }

  try_setFeePercentageBridge(newFee: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setFeePercentageBridge",
      "setFeePercentageBridge(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(newFee)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setMinTokenAmount(blockchainName: string, newAmount: BigInt): boolean {
    let result = super.call(
      "setMinTokenAmount",
      "setMinTokenAmount(string,uint256):(bool)",
      [
        ethereum.Value.fromString(blockchainName),
        ethereum.Value.fromUnsignedBigInt(newAmount)
      ]
    );

    return result[0].toBoolean();
  }

  try_setMinTokenAmount(
    blockchainName: string,
    newAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setMinTokenAmount",
      "setMinTokenAmount(string,uint256):(bool)",
      [
        ethereum.Value.fromString(blockchainName),
        ethereum.Value.fromUnsignedBigInt(newAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalFeeReceivedBridge(): BigInt {
    let result = super.call(
      "totalFeeReceivedBridge",
      "totalFeeReceivedBridge():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFeeReceivedBridge(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeeReceivedBridge",
      "totalFeeReceivedBridge():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferOwnership(newOwner: Address): boolean {
    let result = super.call(
      "transferOwnership",
      "transferOwnership(address):(bool)",
      [ethereum.Value.fromAddress(newOwner)]
    );

    return result[0].toBoolean();
  }

  try_transferOwnership(newOwner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferOwnership",
      "transferOwnership(address):(bool)",
      [ethereum.Value.fromAddress(newOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawToken(amount: BigInt, receiverWallet: Address): boolean {
    let result = super.call(
      "withdrawToken",
      "withdrawToken(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(receiverWallet)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawToken(
    amount: BigInt,
    receiverWallet: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawToken",
      "withdrawToken(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(receiverWallet)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AcceptTransferCall extends ethereum.Call {
  get inputs(): AcceptTransferCall__Inputs {
    return new AcceptTransferCall__Inputs(this);
  }

  get outputs(): AcceptTransferCall__Outputs {
    return new AcceptTransferCall__Outputs(this);
  }
}

export class AcceptTransferCall__Inputs {
  _call: AcceptTransferCall;

  constructor(call: AcceptTransferCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get fromBlockchain(): string {
    return this._call.inputValues[2].value.toString();
  }

  get blockHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get transactionHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get logIndex(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AcceptTransferCall__Outputs {
  _call: AcceptTransferCall;

  constructor(call: AcceptTransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddBlockchainCall extends ethereum.Call {
  get inputs(): AddBlockchainCall__Inputs {
    return new AddBlockchainCall__Inputs(this);
  }

  get outputs(): AddBlockchainCall__Outputs {
    return new AddBlockchainCall__Outputs(this);
  }
}

export class AddBlockchainCall__Inputs {
  _call: AddBlockchainCall;

  constructor(call: AddBlockchainCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get minTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddBlockchainCall__Outputs {
  _call: AddBlockchainCall;

  constructor(call: AddBlockchainCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddMonitorCall extends ethereum.Call {
  get inputs(): AddMonitorCall__Inputs {
    return new AddMonitorCall__Inputs(this);
  }

  get outputs(): AddMonitorCall__Outputs {
    return new AddMonitorCall__Outputs(this);
  }
}

export class AddMonitorCall__Inputs {
  _call: AddMonitorCall;

  constructor(call: AddMonitorCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddMonitorCall__Outputs {
  _call: AddMonitorCall;

  constructor(call: AddMonitorCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelBlockchainCall extends ethereum.Call {
  get inputs(): DelBlockchainCall__Inputs {
    return new DelBlockchainCall__Inputs(this);
  }

  get outputs(): DelBlockchainCall__Outputs {
    return new DelBlockchainCall__Outputs(this);
  }
}

export class DelBlockchainCall__Inputs {
  _call: DelBlockchainCall;

  constructor(call: DelBlockchainCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class DelBlockchainCall__Outputs {
  _call: DelBlockchainCall;

  constructor(call: DelBlockchainCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelMonitorCall extends ethereum.Call {
  get inputs(): DelMonitorCall__Inputs {
    return new DelMonitorCall__Inputs(this);
  }

  get outputs(): DelMonitorCall__Outputs {
    return new DelMonitorCall__Outputs(this);
  }
}

export class DelMonitorCall__Inputs {
  _call: DelMonitorCall;

  constructor(call: DelMonitorCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelMonitorCall__Outputs {
  _call: DelMonitorCall;

  constructor(call: DelMonitorCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ReceiveTokensCall extends ethereum.Call {
  get inputs(): ReceiveTokensCall__Inputs {
    return new ReceiveTokensCall__Inputs(this);
  }

  get outputs(): ReceiveTokensCall__Outputs {
    return new ReceiveTokensCall__Outputs(this);
  }
}

export class ReceiveTokensCall__Inputs {
  _call: ReceiveTokensCall;

  constructor(call: ReceiveTokensCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toBlockchain(): string {
    return this._call.inputValues[1].value.toString();
  }

  get toAddress(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ReceiveTokensCall__Outputs {
  _call: ReceiveTokensCall;

  constructor(call: ReceiveTokensCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetDeployBridgeCall extends ethereum.Call {
  get inputs(): SetDeployBridgeCall__Inputs {
    return new SetDeployBridgeCall__Inputs(this);
  }

  get outputs(): SetDeployBridgeCall__Outputs {
    return new SetDeployBridgeCall__Outputs(this);
  }
}

export class SetDeployBridgeCall__Inputs {
  _call: SetDeployBridgeCall;

  constructor(call: SetDeployBridgeCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get monitor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get feeNative(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get feePercentage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetDeployBridgeCall__Outputs {
  _call: SetDeployBridgeCall;

  constructor(call: SetDeployBridgeCall) {
    this._call = call;
  }
}

export class SetFeeNativeCall extends ethereum.Call {
  get inputs(): SetFeeNativeCall__Inputs {
    return new SetFeeNativeCall__Inputs(this);
  }

  get outputs(): SetFeeNativeCall__Outputs {
    return new SetFeeNativeCall__Outputs(this);
  }
}

export class SetFeeNativeCall__Inputs {
  _call: SetFeeNativeCall;

  constructor(call: SetFeeNativeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeNativeCall__Outputs {
  _call: SetFeeNativeCall;

  constructor(call: SetFeeNativeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetFeePercentageBridgeCall extends ethereum.Call {
  get inputs(): SetFeePercentageBridgeCall__Inputs {
    return new SetFeePercentageBridgeCall__Inputs(this);
  }

  get outputs(): SetFeePercentageBridgeCall__Outputs {
    return new SetFeePercentageBridgeCall__Outputs(this);
  }
}

export class SetFeePercentageBridgeCall__Inputs {
  _call: SetFeePercentageBridgeCall;

  constructor(call: SetFeePercentageBridgeCall) {
    this._call = call;
  }

  get newFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeePercentageBridgeCall__Outputs {
  _call: SetFeePercentageBridgeCall;

  constructor(call: SetFeePercentageBridgeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetMinTokenAmountCall extends ethereum.Call {
  get inputs(): SetMinTokenAmountCall__Inputs {
    return new SetMinTokenAmountCall__Inputs(this);
  }

  get outputs(): SetMinTokenAmountCall__Outputs {
    return new SetMinTokenAmountCall__Outputs(this);
  }
}

export class SetMinTokenAmountCall__Inputs {
  _call: SetMinTokenAmountCall;

  constructor(call: SetMinTokenAmountCall) {
    this._call = call;
  }

  get blockchainName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get newAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinTokenAmountCall__Outputs {
  _call: SetMinTokenAmountCall;

  constructor(call: SetMinTokenAmountCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiverWallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
